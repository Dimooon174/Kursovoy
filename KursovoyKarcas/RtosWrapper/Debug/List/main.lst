###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         27/May/2021  17:34:22
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\main.cpp
#    Command line =
#        -f C:\Users\super\AppData\Local\Temp\EWB036.tmp ("C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\main.cpp" -lC "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Debug\List" -lA "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Debug\List" -o "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config D:\Games\IAR\arm\inc\c\DLib_Config_Normal.h -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\wrapper\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\wrapper\FreeRtos\" -I
#        "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\" -I
#        "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\include\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\portable\" -I
#        "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\portable\Common\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\portable\IAR\" -I
#        "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\portable\IAR\ARM_CM4F\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Rtos\FreeRtos\portable\MemMang\"
#        -I "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\MyTasks\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Common\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\CMSIS\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Application\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Application\Diagnostic\" -I
#        "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\GpioPort\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\IrqController\" -I
#        "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Pin\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\FieldValues\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Registers\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Port\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\AbstractHardware\Atomic\"
#        -I "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\Common\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\Common\Singleton\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\..\CortexLib\Common\RomObject\"
#        -I "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\USART\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\Common\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\Registers\" -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\Registers\STM32F411\FieldValues\"
#        -I "C:\IAR
#        Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\Registers\STM32F411\"
#        -I "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\SPI\" -I
#        "C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\AHardware\BME280Driver\"
#        -Ol --c++ --no_exceptions --no_rtti)
#    Locale       =  C
#    List file    =
#        C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\Debug\List\main.lst
#    Object file  =
#        C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\Debug\Obj\main.o
#
###############################################################################

C:\IAR Proj\NEW6\KursovoyKarcas\RtosWrapper\main.cpp
      1          #include "rtos.hpp"         // for Rtos
      2          #include "mailbox.hpp"      // for Mailbox
      3          #include "event.hpp"        // for Event
      4          #include "rccregisters.hpp" // for RCC
      5          #include <iostream>
      6          #include <gpioaregisters.hpp>  // for GPIOA
      7          #include <gpiobregisters.hpp>  // for GPIOB
      8          #include <gpiocregisters.hpp>  // for GPIOC
      9          #include "adc1registers.hpp"
     10          #include "adccommonregisters.hpp"
     11          #include "UsartConfig.hpp" //for usartconfig
     12          #include "Ledtask.hpp"
     13          #include "tim2registers.hpp"
     14          #include "nvicregisters.hpp"
     15          #include "spi1registers.hpp"
     16          #include "spi2registers.hpp"
     17          #include "Temperature.hpp"
     18          #include "TemperatureTask.hpp"
     19          #include "stkregisters.hpp"
     20          #include "scbregisters.hpp"
     21          #include "USARTTask.hpp"
     22          #include "CoolerTask.hpp"
     23          
     24          std::uint32_t SystemCoreClock = 8'000'000U;
     25          constexpr std::uint32_t UartSpeed9600 = std::uint32_t(16000000U / 9600U);
     26          
     27          extern "C" {
     28          int __low_level_init(void)
     29          {
     30            //Switch on external 16 MHz oscillator
     31            RCC::CR::HSION::On::Set();
     32           // while (RCC::CR::HSIRDY::NotReady::IsSet())
     33            {
     34          
     35            }
     36            //Switch system clock on external oscillator
     37            RCC::CFGR::SW::Hsi::Set();
     38            //while (!RCC::CFGR::SWS::Hsi::IsSet())
     39           {
     40          
     41            }
     42            //Switch on clock on PortA and PortC
     43            RCC::AHB1ENRPack<
     44                RCC::AHB1ENR::GPIOCEN::Enable,
     45                RCC::AHB1ENR::GPIOBEN::Enable,
     46                RCC::AHB1ENR::GPIOAEN::Enable
     47            >::Set();
     48          
     49            //Start system Timer
     50            RCC::APB2ENR::SYSCFGEN::Enable::Set();
     51            RCC::APB1ENR::TIM2EN::Enable::Set();
     52            //LED1 on PortA.5, set PortA.5 as output
     53            GPIOA::MODER::MODER5::Output::Set();
     54          
     55            /* LED2 on PortC.9, LED3 on PortC.8, LED4 on PortC.5 so set PortC.5,8,9 as output */
     56            GPIOC::MODERPack<
     57                GPIOC::MODER::MODER5::Output,
     58                GPIOC::MODER::MODER8::Output,
     59                GPIOC::MODER::MODER9::Output
     60            >::Set();
     61            
     62           GPIOA::MODER::MODER10::Output::Set();
     63           GPIOA::BSRR::BS10::High::Write();
     64           GPIOB::MODER::MODER10::Output::Set();
     65           GPIOB::BSRR::BS10::High::Write();
     66            GPIOB::MODER::MODER10::Alternate::Set();
     67            GPIOB::AFRH::AFRH10::Af1::Set();
     68            //ADC
     69          RCC::APB2ENR::ADC1EN::Enable::Set(); //включаем АЦП
     70          ADC1::SQR3::SQ1::Channel18::Set();// настраиваем порт датчика т-ры
     71          ADC_Common::CCR::TSVREFE::Enable::Set();// включаем порт датчика температуры
     72          ADC1::CR1::RES::Bits12::Set();//разрядность 12бит
     73          ADC1::CR2::CONT::SingleConversion::Set();//установ одиночное преобразование
     74          ADC1::CR2::EOCS::SingleConversion::Set();//установ одиночное преобразование
     75          ADC1::SQR1::L::Conversions1::Set();//количество измерений 1
     76          ADC1::SMPR1::SMP18::Cycles84::Set();// скорость дискретизации
     77          ADC1::CR2::ADON::Enable::Set();//
     78          
     79          
     80            //TIM2
     81            RCC::APB1ENR::TIM2EN::Enable::Set();
     82            TIM2::PSC::Write(0);
     83            TIM2::ARR::Write(500);
     84            TIM2::SR::UIF::NoUpdate::Set();
     85            TIM2::CNT::Write(0);
     86            TIM2::CCR3::Write(1000);
     87            TIM2::EGR::UG::UpdateGenerated::Write();
     88            TIM2::CCMR2_Output::OC3M::PwmMode1::Set();
     89            TIM2::CCMR2_Output::OC3PE::Enable::Set();
     90            TIM2::CR1::ARPE::ArrBuffered::Set();
     91            TIM2::CCER::CC3E::On::Set();
     92            TIM2::CR1::CEN::Enable::Set() ;
     93            
     94            
     95            //USART  
     96            RCC::APB1ENRPack<
     97              RCC::APB1ENR::TIM2EN::Enable, 
     98              RCC::APB1ENR::USART2EN::Enable
     99              >::Set() ;
    100            
    101            GPIOA::MODERPack<
    102              GPIOA::MODER::MODER2::Alternate, // Uart2 TX
    103              GPIOA::MODER::MODER3::Alternate  // Uart2 RX
    104              >::Set() ;
    105            
    106            GPIOA::AFRLPack <
    107              GPIOA::AFRL::AFRL2::Af7, // Uart2 TX
    108              GPIOA::AFRL::AFRL3::Af7  // Uart2 RX
    109              >::Set() ;
    110            
    111              USART2::BRR::Write(UartSpeed9600);
    112              USART2::CR1::UE::Enable::Set();    
    113              NVIC::ISER1::Write(1<<6);
    114          
    115          //system timer
    116            STK::LOAD::Write(SystemCoreClock/1000U - 1);
    117            STK::VAL::Write(0U);
    118            STK::CTRL::CLKSOURCE::CpuClock::Set();
    119            STK::CTRL::TICKINT::EnableInterrupt::Set();
    120            STK::CTRL::ENABLE::Enable::Set();
    121            
    122            return 1;
    123          }
    124          }
    125          //ILed* leds[4] = {&led1, &led2, &led3, &led4};
    126          //LedTask ledtask(100ms);
    127          Temperature temperature;
    128          Filter filter(1.0F, 0.200F);
    129          
    130          TemperatureTask temperatureTask(temperature, filter);
    131          CoolerTask coolerTask(temperatureTask, aCooler);
                                                        ^
Error[Pe020]: identifier "aCooler" is undefined
    132          USARTTask usartTask(temperatureTask, coolerTask);
    133          //LedTask ledTask(coolerTask);
    134          int main()
    135          {
    136          
    137           // for(auto it: leds)
    138           // {
    139           //   it->SwitchOn();
    140           // }
    141               Rtos::CreateThread(temperatureTask, "temperatureTask", ThreadPriority::normal);  
    142               Rtos::CreateThread(usartTask, "usartTask", ThreadPriority::normal); 
    143               Rtos::CreateThread(coolerTask, "coolerTask", ThreadPriority::normal); 
    144               //Rtos::CreateThread(LedTask, "ledTask", ThreadPriority::normal); 
    145               Rtos::Start();
    146          //     
    147          //    for(;;)
    148          //    {
    149          //     float a = temperature.GetValue();
    150          //           std::cout << " TEMP °C : " <<  a << std::endl;
    151          //    }  
    152            return 0;
    153          }

Errors: 1
Warnings: none
